#include <Servo.h>
#include <WiFi.h>
#include <Firebase_ESP_Client.h>
#include "addons/TokenHelper.h"
#include "addons/RTDBHelper.h"
FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;
bool signupOK = false;
#define API_KEY "AIzaSyAAU0dF-mqOF4ktp77b5oerbebSUTxun6Q"
#define DATABASE_URL "https://esp32-8ace1-default-rtdb.firebaseio.com/"

const char* ssid = "hotspot"; 
const char* password =  "12345678";

// PWM properties
const int freq = 12000;
const int ledChannel = 1;
const int resolution = 8;
const int ledPin = 4;

// Servo
Servo servo_1;
int servo_pin = 2;
int pos = 0;

// Fan and Temperature
float temp;
const int tempPin = 32;
int fanpin=14;
int rotvalue=0;
int fanstatus=0;
int fanspeed=0;

TaskHandle_t Task1;
TaskHandle_t Task2;

void setup() {
  Serial.begin(115200); 
  servo_1.attach(servo_pin);
  pinMode(tempPin,INPUT);
  pinMode(fanpin,OUTPUT);
  WiFi.begin(ssid, password);
  Serial.println("Connecting to WiFi..");
   while (WiFi.status() != WL_CONNECTED) {
     delay(1000);
     Serial.print(".");
  }

  ledcSetup(ledChannel, freq, resolution);
  ledcAttachPin(ledPin, ledChannel);
  ledcWrite(ledChannel, 0);

  config.api_key = API_KEY;
  config.database_url = DATABASE_URL;
  if (Firebase.signUp(&config, &auth, "", "")){
    Serial.println("\nConnected to WiFi!");
    signupOK = true;
  }
  else{
    Serial.printf("%s\n", config.signer.signupError.message.c_str());
  }
  config.token_status_callback = tokenStatusCallback;
  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true);

  //create a task that will be executed in the Task1code() function, with priority 1 and executed on core 0
  xTaskCreatePinnedToCore(
                    Task1code,   /* Task function. */
                    "Task1",     /* name of task. */
                    10000,       /* Stack size of task */
                    NULL,        /* parameter of the task */
                    1,           /* priority of the task */
                    &Task1,      /* Task handle to keep track of created task */
                    0);          /* pin task to core 0 */                  
  delay(500); 

  //create a task that will be executed in the Task2code() function, with priority 1 and executed on core 1
  xTaskCreatePinnedToCore(
                    Task2code,   /* Task function. */
                    "Task2",     /* name of task. */
                    10000,       /* Stack size of task */
                    NULL,        /* parameter of the task */
                    1,           /* priority of the task */
                    &Task2,      /* Task handle to keep track of created task */
                    1);          /* pin task to core 1 */
    delay(500); 
}

void Task1code( void * pvParameters ){
  const TickType_t xDelay = 500;
  Serial.print("Task1 running on core ");
  Serial.println(xPortGetCoreID());

  for(;;){
    temp = analogRead(tempPin);
    temp = temp * 0.48828125;

    ledcWrite(ledChannel, fanspeed);

    if (Firebase.ready() && signupOK){
     if (Firebase.RTDB.getInt(&fbdo, "rotation/value")) {
       if (fbdo.dataType() == "int") {
         rotvalue = fbdo.intData();
       }
     }
    }
    
    if (Firebase.ready() && signupOK){
     if (Firebase.RTDB.getInt(&fbdo, "fan/status")) {
       if (fbdo.dataType() == "int") {
         fanstatus = fbdo.intData();
       }
     }
    }
    
    if(fanstatus==0){
      digitalWrite(fanpin,LOW);
    }
    else{
      digitalWrite(fanpin,HIGH);
    }
    
    if (Firebase.ready() && signupOK){
     if (Firebase.RTDB.getInt(&fbdo, "fan/speed")) {
       if (fbdo.dataType() == "int") {
         fanspeed = fbdo.intData();
       }
     }
    }
    
    Firebase.RTDB.setFloat(&fbdo, "temperature/value", temp);
    Serial.println(rotvalue);
    servo_1.write(rotvalue);
    Serial.println(temp);
    vTaskDelay( xDelay );
  } 
}

//Task2code: blinks an LED every 700 ms
void Task2code( void * pvParameters ){
  Serial.print("Task2 running on core ");
  Serial.println(xPortGetCoreID());

  for(;;){
  }
}

void loop() {
  
}
