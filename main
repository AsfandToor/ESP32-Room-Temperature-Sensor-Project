#include <Servo.h> // Servo Motor
#include <WiFi.h> // WiFi Module
#include <HTTPClient.h> // Creating HTTP Requests
#include <ArduinoJson.h> // Parsing JSON
#include <Wire.h> // Addressing LCD
#include <LiquidCrystal_I2C.h> // LCD 
#include <Firebase_ESP_Client.h> // Firebase Communication
#include "addons/TokenHelper.h" // FireBase Authentication Helper
#include "addons/RTDBHelper.h" // FireBase Error Handler
FirebaseData fbdo; // Data Helper
FirebaseAuth auth; // Authentication 
FirebaseConfig config; // Databse Configurations
bool signupOK = false; 
#define API_KEY "AIzaSyAAU0dF-mqOF4ktp77b5oerbebSUTxun6Q" // Database API Key
#define DATABASE_URL "https://esp32-8ace1-default-rtdb.firebaseio.com/" // DataBase URL

const char* ssid = "hotspot"; // Configuring Wifi Name
const char* password =  "12345678"; // Configuring Wifi password

const String URL = "http://api.weatherapi.com/v1/current.json?key=9774771347ed4029bae184250220404&q="; // API URL
String CITY = "London"; // API Location

int lcdColumns = 16; // LCD Columns Display
int lcdRows = 2;   // LCD Rows Display
LiquidCrystal_I2C lcd(0x27, lcdColumns, lcdRows); // LCD Init

HTTPClient http;

const char* location; // API Location Variable
float cityTemp; // API City Temmperature
int prevParam = 1; // LCD Alternate Displays

// PWM properties
// This will control the speed of Fan
const int freq = 12000; // Setting up oscillating frequencies
const int ledChannel = 3; // Setting up LCD Channel to 3 for Communication
const int resolution = 8; // Setting Resolution to 8 Bytes (256 bits)
const int ledPin = 4; // LED Pin init

// Servo
Servo myservo; // Init Servo Object
int pos = 0; // Servo Default position

// Fan and Temperature
float temp; // Surrounding Temperature LM35
const int tempPin = 32; // Init Temperature Pin
int fanpin=14; // Init Fan Pin
int rotvalue=0; // Servo Motor Rotation Value
int fanstatus=0; // Fan ON/OFF Status
int fanspeed=0; // Fan Speed (Controls Brightness of LED immitating Fan Speed)

TaskHandle_t Task1; // Task 1 Code running on Core 0
TaskHandle_t Task2; // Task 2 Code running on Core 1

void setup() {
  Serial.begin(115200); // Setting BAUD Rate to 115200
  myservo.attach(13); // Attaching Servo Pin to Object
  myservo.write(180); // Writing Initial Position to 180
  
  pinMode(tempPin,INPUT); // Setting Temperature Pin as Input
  pinMode(fanpin,OUTPUT); // Setting Fan Pin as Output
  
  lcd.init(); // Turning LCD ON
  lcd.backlight(); // Turning ON LCD Backlight
  
  WiFi.begin(ssid, password); // Connecting to WiFi
  Serial.println("Connecting to WiFi..");
   while (WiFi.status() != WL_CONNECTED) {
     delay(1000);
     Serial.print(".");
  }

  // Setting Up LED Properties
  ledcSetup(ledChannel, freq, resolution);
  ledcAttachPin(ledPin, ledChannel); // Setting Up Pin Channel
  ledcWrite(ledChannel, 0); // Changing LED Initial Brightness to 0

  config.api_key = API_KEY; // Configuring Database API Key
  config.database_url = DATABASE_URL; // Configuring Database URL

  // Checking If User Connected Succesfully
  if (Firebase.signUp(&config, &auth, "", "")){
    Serial.println("\nConnected to WiFi!");
    signupOK = true;
  }
  else{
    Serial.printf("%s\n", config.signer.signupError.message.c_str());
  }
  config.token_status_callback = tokenStatusCallback;

  // Beginning Firebase
  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true); // Firebase Recconecting Again upon loss of WiFi network

  // Creting a Task pinned to Core 0
  xTaskCreatePinnedToCore(
                    Task1code,   /* Task function. */
                    "Task1",     /* Name of task. */
                    10000,       /* Stack size of task */
                    NULL,        /* parameter of the task */
                    1,           /* priority of the task */
                    &Task1,      /* Task handle to keep track of created task */
                    0);          /* Pin task to core 0 */                  
  delay(500); 

  // Creting a Task pinned to Core 1
  xTaskCreatePinnedToCore(
                    Task2code,   /* Task function. */
                    "Task2",     /* name of task. */
                    10000,       /* Stack size of task */
                    NULL,        /* parameter of the task */
                    1,           /* priority of the task */
                    &Task2,      /* Task handle to keep track of created task */
                    1);          /* pin task to core 1 */
    delay(500); 
}

// Code For Task 1
void Task1code( void * pvParameters ){
  const TickType_t xDelay = 500; // Setting Tick Delay to 500ms to Avoid Watchdog
 
  for(;;){ // Infinite Loop works like void loop()
    temp = analogRead(tempPin); // Reading Analogue Tmep Value
    temp = temp * 0.48828125; // Converting to Farenheit

    ledcWrite(ledChannel, fanspeed); // Writing LED Brightness

    // Fetching Rotation Value
    if (Firebase.ready() && signupOK){
     if (Firebase.RTDB.getInt(&fbdo, "rotation/value")) {
       if (fbdo.dataType() == "int") {
         pos = fbdo.intData();
       }
     }
    }

    // Fetching Fan Statues
    if (Firebase.ready() && signupOK){
     if (Firebase.RTDB.getInt(&fbdo, "fan/status")) {
       if (fbdo.dataType() == "int") {
         fanstatus = fbdo.intData();
       }
     }
    }

    // Turning Fan ON/OFF
    if(fanstatus==0){
      digitalWrite(fanpin,LOW);
    }
    else{
      digitalWrite(fanpin,HIGH);
    }

    // Fetching Fan Speed
    if (Firebase.ready() && signupOK){
     if (Firebase.RTDB.getInt(&fbdo, "fan/speed")) {
       if (fbdo.dataType() == "int") {
         fanspeed = fbdo.intData();
       }
     }
    }

    // Writing Temperature Value
    Firebase.RTDB.setFloat(&fbdo, "temperature/value", temp);
    myservo.write(pos); 
    vTaskDelay( xDelay );
  } 
}

// Code For Task 2
void Task2code( void * pvParameters ){
  const TickType_t xDelay = 3000; // Setting Tick Delay to 3000ms
  
  for(;;){
    fetchData();
    vTaskDelay( xDelay );
  }
}

void fetchData() {
    http.begin(URL+CITY); // Setting URL for HTTP Requests
    int httpCode = http.GET(); // Getting HTTP Data

    if (httpCode > 0) { // Checking If Requests was Successfull
      String data = http.getString(); // Getting Data String
         
      StaticJsonBuffer<2000> JSONBuffer; // Getting JSON Buffer Stack Size to 2000
      JsonObject& parsed = JSONBuffer.parseObject(data); // Parsing the String to JSON
      if (parsed.success()) { // If Parsing Succesfull
          location = parsed["location"]["name"]; // Getting Location Name
          cityTemp = parsed["current"]["temp_c"]; // Getting Temperature
          displayData();
      }
      else {
        Serial.println("Parsing Failed");
      }
    }
    else {
      Serial.println("Error in Requesting API");
    }

    http.end();
}

void displayData() {
   lcd.setCursor(0, 0); // Setting LCD Cursor to 0 Row 0 Column
  // print message
  lcd.clear(); // Clearing LCD
  if(prevParam == 1) {
    lcd.print("Loc: ");
    lcd.print(location);
    prevParam = 0;
  }
  else if (prevParam == 0) {
    lcd.print("Temp: ");
    lcd.print(cityTemp);
    prevParam = 1;
  }
}

void loop() {
  
}
